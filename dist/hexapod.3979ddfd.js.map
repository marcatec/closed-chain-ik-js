{"mappings":"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","sources":["example/hexapod.js"],"sourcesContent":["import {\n\tWebGLRenderer,\n\tPerspectiveCamera,\n\tColor,\n\tScene,\n\tDirectionalLight,\n\tAmbientLight,\n\tsRGBEncoding,\n\tGroup,\n\tVector3,\n\tMesh,\n\tPCFSoftShadowMap,\n} from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls.js';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\nimport {\n\tSolver,\n\tLink,\n\tJoint,\n\tSOLVE_STATUS_NAMES,\n\tIKRootsHelper,\n\tsetUrdfFromIK,\n\turdfRobotToIKRoot,\n\tsetIKFromUrdf,\n\tGoal,\n\tDOF,\n\tSOLVE_STATUS,\n} from '../src/index.js';\nimport URDFLoader from 'urdf-loader';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';\n\nconst params = {\n\tanimate: 'gyrate',\n\tbaseTilt: 0,\n\tsolve: true,\n\tdisplayMesh: true,\n\tdisplayIk: false,\n\tenableControls: true,\n\tsettleIterations: 6,\n\tdisplayConvergedOnly: true,\n};\n\nconst solverOptions = {\n\tmaxIterations: 10,\n\tdivergeThreshold: 0.05,\n\tstallThreshold: 1e-5,\n\ttranslationErrorClamp: 0.01,\n\trotationErrorClamp: 0.01,\n\n\ttranslationConvergeThreshold: 1e-5,\n\trotationConvergeThreshold: 1e-5,\n};\n\nlet gui, stats;\nlet outputContainer, renderer, scene, camera;\nlet controls, transformControls, targetObject;\nlet directionalLight;\nlet ikNeedsUpdate = true;\nconst tempVec = new Vector3();\n\nlet urdfRoot, ikRoot, ikHelper, drawThroughIkHelper, solver, platformLink, platformGoal;\ninit();\nrender();\n\nfunction init() {\n\n\tstats = new Stats();\n\tdocument.body.appendChild( stats.dom );\n\n\toutputContainer = document.getElementById( 'output' );\n\n\t// init renderer\n\trenderer = new WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.shadowMap.enabled = true;\n\trenderer.shadowMap.type = PCFSoftShadowMap;\n\trenderer.outputEncoding = sRGBEncoding;\n\tdocument.body.appendChild( renderer.domElement );\n\n\tcamera = new PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 0.01, 100 );\n\tcamera.position.set( 0.3, 0.3, 0.3 );\n\n\tscene = new Scene();\n\tscene.background = new Color( 0x1e161d );\n\n\t// init light / shadow camera\n\tdirectionalLight = new DirectionalLight();\n\tdirectionalLight.position.set( 1, 3, 2 );\n\tdirectionalLight.intensity = 0.75;\n\tdirectionalLight.castShadow = true;\n\tdirectionalLight.shadow.mapSize.setScalar( 2048 );\n\n\tconst shadowCam = directionalLight.shadow.camera;\n\tshadowCam.top = shadowCam.right = 0.25;\n\tshadowCam.left = shadowCam.bottom = - 0.25;\n\tshadowCam.near = 0;\n\tshadowCam.far = 10;\n\tshadowCam.updateProjectionMatrix();\n\n\t// add a directional light to illuminate the other side\n\tconst otherDirectionalLight = new DirectionalLight();\n\totherDirectionalLight.intensity = 0.25;\n\totherDirectionalLight.position.set( - 1, - 3, - 2 );\n\n\tconst ambientLight = new AmbientLight( 0x1f1a1e, 1 );\n\tscene.add( directionalLight, directionalLight.target, otherDirectionalLight, ambientLight );\n\n\t// controls\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\tcontrols.target.y = 0.05;\n\tcontrols.update();\n\n\ttransformControls = new TransformControls( camera, renderer.domElement );\n\ttransformControls.setSpace( 'local' );\n\tscene.add( transformControls );\n\n\ttransformControls.addEventListener( 'mouseDown', () => {\n\n\t\tcontrols.enabled = false;\n\t\tparams.animate = 'none';\n\n \t} );\n\n\ttransformControls.addEventListener( 'mouseUp', () => {\n\n\t\tcontrols.enabled = true;\n\t\tikNeedsUpdate = true;\n\t\tsetIKFromUrdf( ikRoot, urdfRoot );\n\n\t\tikRoot.updateMatrixWorld( true );\n\n\t} );\n\n\t// hexapod platform target\n\ttargetObject = new Group();\n\tscene.add( targetObject );\n\n\ttransformControls.attach( targetObject );\n\ttransformControls.addEventListener( 'objectChange', () => {\n\n\t\tikNeedsUpdate = true;\n\n\t} );\n\n\t// init gui\n\tgui = new GUI();\n\tgui.add( params, 'enableControls' );\n\tgui.add( params, 'animate', [ 'none', 'gyrate', 'rotate' ] ).listen();\n\tgui.add( params, 'baseTilt', - 0.3, 0.3, 1e-4 ).onChange( () => ikNeedsUpdate = true );\n\tgui.add( params, 'solve' );\n\tgui.add( params, 'displayMesh' );\n\tgui.add( params, 'displayIk' );\n\tgui.add( params, 'displayConvergedOnly' );\n\tgui.add( params, 'settleIterations', 1, 20, 1 ).onChange( () => ikNeedsUpdate = true );\n\n\t// load model\n\tconst loader = new URDFLoader();\n\tloader.fetchOptions = {\n\t\tmode: 'cors',\n\t};\n\n\tloader.packages = {\n\t\t'pi_hexapod_description': 'https://raw.githubusercontent.com/PI-PhysikInstrumente/PI_ROS_Driver/master/pi_hexapod_driver/pi_hexapod_description/',\n\t};\n\n\tloader.loadMeshCb = ( path, manager, done ) => {\n\n\t\tif ( /\\.stl$/.test( path ) ) {\n\n\t\t\tnew STLLoader( manager ).load( path, res => {\n\n\t\t\t\tconst mesh = new Mesh( res );\n\t\t\t\tmesh.castShadow = true;\n\t\t\t\tmesh.receiveShadow = true;\n\t\t\t\tdone( mesh );\n\n\t\t\t} );\n\n\t\t} else if ( /\\.dae$/.test( path ) ) {\n\n\t\t\tnew ColladaLoader( manager ).load( path, res => {\n\n\t\t\t\tconst model = res.scene;\n\t\t\t\tconst lights = [];\n\t\t\t\tmodel.traverse( c => {\n\n\t\t\t\t\tc.castShadow = true;\n\t\t\t\t\tc.receiveShadow = true;\n\t\t\t\t\tif ( c.isLight ) {\n\n\t\t\t\t\t\tlights.push( c );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tlights.forEach( l => {\n\n\t\t\t\t\tl.parent.remove( l );\n\n\t\t\t\t} );\n\n\t\t\t\tdone( model );\n\n\t\t\t} );\n\n\t\t}\n\n\t};\n\n\tloader\n\t\t.loadAsync( 'https://raw.githubusercontent.com/gkjohnson/PI_ROS_Driver/master/pi_hexapod_driver/pi_hexapod_description/urdf/pi_hexapod.urdf' )\n\t\t.then( result => {\n\n\t\t\turdfRoot = result;\n\n\t\t\turdfRoot.traverse( c => {\n\n\t\t\t\tif ( c.jointType === 'floating' ) {\n\n\t\t\t\t\tc.jointType = 'fixed';\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tconst joints = urdfRoot.joints;\n\t\t\tfor ( const key in joints ) {\n\n\t\t\t\t// adjust the limits of the joints\n\t\t\t\tconst joint = joints[ key ];\n\t\t\t\tif ( joint.name.includes( 'ang' ) ) {\n\n\t\t\t\t\tjoint.limit.lower = - Infinity;\n\t\t\t\t\tjoint.limit.upper = Infinity;\n\n\t\t\t\t} else if ( joint.name.includes( 'cart' ) ) {\n\n\t\t\t\t\tjoint.limit.lower *= 5;\n\t\t\t\t\tjoint.limit.upper *= 5;\n\n\t\t\t\t} else if ( joint.jointType === 'revolute' ) {\n\n\t\t\t\t\tjoint.jointType = 'continuous';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate the ik root and set the root to a fixed position\n\t\t\tikRoot = urdfRobotToIKRoot( urdfRoot );\n\t\t\tikRoot.setDoF();\n\n\t\t\t// update the root from the URDF so goals can be placed in world space\n\t\t\turdfRoot.rotation.set( - Math.PI / 2, 0, 0 );\n\t\t\tikRoot.setEuler( - Math.PI / 2, 0, 0 );\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tconst key = `axis${ i }_platform_anchor_joint_x`;\n\t\t\t\tconst joint = urdfRoot.joints[ key ];\n\t\t\t\tjoint.setJointValue( Math.PI );\n\n\t\t\t}\n\n\t\t\tsetIKFromUrdf( ikRoot, urdfRoot );\n\n\t\t\t// set the goal for the hexapod platform\n\t\t\tplatformLink = ikRoot.find( c => c.name === 'platform_link' );\n\t\t\tplatformGoal = new Goal();\n\t\t\tplatformGoal.setEuler( - Math.PI / 2, 0, 0 );\n\t\t\tplatformGoal.setPosition( 0, 0.095, 0 );\n\t\t\tplatformGoal.makeClosure( platformLink );\n\n\t\t\t// set the target object position\n\t\t\ttargetObject.quaternion.set( ...platformGoal.quaternion );\n\t\t\ttargetObject.position.set( ...platformGoal.position );\n\n\t\t\t// set up the hexapod connections\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t// set up the base link with a prismatic joint and goal\n\t\t\t\tconst baseLinkName = `axis${ i }_base_anchor_link_3`;\n\t\t\t\tconst baseLink = ikRoot.find( c => c.name === baseLinkName );\n\n\t\t\t\tconst prismJoint = new Joint();\n\t\t\t\tprismJoint.setDoF( DOF.Z );\n\t\t\t\tprismJoint.setMinLimits( 0.035 );\n\t\t\t\tprismJoint.setMaxLimits( 0.08 );\n\t\t\t\tbaseLink.addChild( prismJoint );\n\n\t\t\t\tconst prismLink = new Link();\n\t\t\t\tprismJoint.addChild( prismLink );\n\n\t\t\t\tconst goal = new Goal();\n\t\t\t\tgoal.setPosition( 0, 0, 0.05 );\n\t\t\t\tgoal.setEuler( Math.PI, 0, 0 );\n\t\t\t\tprismLink.addChild( goal );\n\n\t\t\t\t// connect the goal to the platform link root\n\t\t\t\tconst platformLinkName = `axis${ i }_platform_anchor_link_3`;\n\t\t\t\tconst platformLink = ikRoot.find( c => c.name === platformLinkName );\n\n\t\t\t\t// set up the goal\n\t\t\t\tgoal.makeClosure( platformLink );\n\n\t\t\t}\n\n\t\t\t// generate ik visualization\n\t\t\tikHelper = new IKRootsHelper( [ ikRoot, platformGoal ] );\n\t\t\tikHelper.setResolution( window.innerWidth, window.innerHeight );\n\t\t\tikHelper.color.set( 0xe91e63 ).convertSRGBToLinear();\n\t\t\tikHelper.setColor( ikHelper.color );\n\t\t\tikHelper.setJointScale( 0.05 );\n\n\t\t\tdrawThroughIkHelper = new IKRootsHelper( [ ikRoot, platformGoal ] );\n\t\t\tdrawThroughIkHelper.setResolution( window.innerWidth, window.innerHeight );\n\t\t\tdrawThroughIkHelper.color.set( 0xe91e63 ).convertSRGBToLinear();\n\t\t\tdrawThroughIkHelper.setColor( drawThroughIkHelper.color );\n\t\t\tdrawThroughIkHelper.setDrawThrough( true );\n\t\t\tdrawThroughIkHelper.setJointScale( 0.05 );\n\n\t\t\tsolver = new Solver( [ ikRoot, platformGoal ] );\n\n\t\t\tscene.add( urdfRoot, ikHelper, drawThroughIkHelper );\n\t\t\tscene.add( urdfRoot );\n\n\t\t} );\n\n\twindow.addEventListener( 'resize', () => {\n\n\t\tconst w = window.innerWidth;\n\t\tconst h = window.innerHeight;\n\t\tconst aspect = w / h;\n\n\t\trenderer.setSize( w, h );\n\n\t\tcamera.aspect = aspect;\n\t\tcamera.updateProjectionMatrix();\n\n\t\tif ( ikHelper ) {\n\n\t\t\tikHelper.setResolution( window.innerWidth, window.innerHeight );\n\t\t\tdrawThroughIkHelper.setResolution( window.innerWidth, window.innerHeight );\n\n\t\t}\n\n\t} );\n\n\twindow.addEventListener( 'keydown', e => {\n\n\t\tswitch ( e.key ) {\n\n\t\t\tcase 'w':\n\t\t\t\ttransformControls.setMode( 'translate' );\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\t\ttransformControls.setMode( 'rotate' );\n\t\t\t\tbreak;\n\t\t\tcase 'q':\n\t\t\t\ttransformControls.setSpace( transformControls.space === 'local' ? 'world' : 'local' );\n\t\t\t\tbreak;\n\t\t\tcase 'f':\n\t\t\t\tcontrols.target.set( 0, 0.05, 0 );\n\t\t\t\tcontrols.update();\n\t\t\t\tbreak;\n\n\t\t}\n\n\t} );\n\n}\n\nfunction updateIk() {\n\n\t// update the hexapod platform from the draggable target\n\tplatformGoal.setPosition(\n\t\ttargetObject.position.x,\n\t\ttargetObject.position.y,\n\t\ttargetObject.position.z,\n\t);\n\n\tplatformGoal.setQuaternion(\n\t\ttargetObject.quaternion.x,\n\t\ttargetObject.quaternion.y,\n\t\ttargetObject.quaternion.z,\n\t\ttargetObject.quaternion.w,\n\t);\n\n\tlet solveOutput = '';\n\tlet totalTime = 0;\n\n\tsetIKFromUrdf( ikRoot, urdfRoot );\n\n\tlet isConverged = false;\n\tfor ( let i = 0; i < params.settleIterations; i ++ ) {\n\n\t\t// update drive goals from the new location\n\t\tikRoot.updateMatrixWorld( true );\n\n\t\t// update options\n\t\tObject.assign( solver, solverOptions );\n\n\t\t// update store results\n\t\tconst startTime = window.performance.now();\n\t\tconst results = solver.solve();\n\t\tconst delta = window.performance.now() - startTime;\n\t\ttotalTime += delta;\n\n\t\tsolveOutput += delta.toFixed( 2 ) + 'ms ' + SOLVE_STATUS_NAMES[ results[ 0 ] ] + '\\n';\n\n\t\tisConverged = results.filter( r => r === SOLVE_STATUS.CONVERGED ).length === results.length;\n\t\tconst isAllDiverged = results.filter( r => r === SOLVE_STATUS.DIVERGED ).length === results.length;\n\t\tconst isAllStalled = results.filter( r => r === SOLVE_STATUS.STALLED ).length === results.length;\n\t\tif ( isConverged || isAllDiverged || isAllStalled ) {\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\t// update output\n\tsolveOutput = solveOutput + '\\n' + 'Total: ' + totalTime.toFixed( 2 ) + 'ms';\n\n\toutputContainer.textContent = solveOutput;\n\n\tif ( ! params.displayConvergedOnly || isConverged ) {\n\n\t\tsetUrdfFromIK( urdfRoot, ikRoot );\n\n\t}\n\n}\n\nfunction render() {\n\n\trequestAnimationFrame( render );\n\n\t// update the transform target to jump to the platform if it's not being dragged\n\tif ( ikRoot && ! transformControls.dragging ) {\n\n\t\ttargetObject.matrix.set( ...platformLink.matrixWorld ).transpose();\n\t\ttargetObject.matrix.decompose(\n\t\t\ttargetObject.position,\n\t\t\ttargetObject.quaternion,\n\t\t\ttargetObject.scale,\n\t\t);\n\n\t\tconst pos = targetObject.position;\n\t\tconst quat = targetObject.quaternion;\n\t\tplatformGoal.setPosition( pos.x, pos.y, pos.z );\n\t\tplatformGoal.setQuaternion( quat.x, quat.y, quat.z, quat.w );\n\n\t}\n\n\tif ( urdfRoot ) {\n\n\t\t// update the base tilt\n\t\tikRoot.setEuler( - Math.PI / 2, 0, params.baseTilt );\n\n\t\t// animate the drag target\n\t\tif ( params.animate === 'gyrate' ) {\n\n\t\t\tconst t = window.performance.now() * 0.004;\n\t\t\ttargetObject.position.z = Math.cos( t ) * 0.02;\n\t\t\ttargetObject.position.x = Math.sin( t ) * 0.02;\n\t\t\ttargetObject.position.y = 0.1025;\n\n\t\t\ttargetObject.rotation.set( - Math.PI / 2, 0, 0 );\n\n\t\t\tikNeedsUpdate = true;\n\n\t\t} else if ( params.animate === 'rotate' ) {\n\n\t\t\tconst t = window.performance.now() * 0.004;\n\t\t\ttargetObject.position.set( 0, 0.105 + Math.sin( t ) * 0.0075, 0 );\n\t\t\ttargetObject.rotation.set( - Math.PI / 2, 0, Math.cos( t * 1.0 ) * 0.75 );\n\n\t\t\tikNeedsUpdate = true;\n\n\t\t}\n\n\t\t// run the solver\n\t\tif ( ikNeedsUpdate && params.solve ) {\n\n\t\t\tupdateIk();\n\t\t\tikNeedsUpdate = false;\n\n\t\t}\n\n\t\t// update the visibility\n\t\turdfRoot.visible = params.displayMesh;\n\t\tikHelper.visible = params.displayIk;\n\t\tdrawThroughIkHelper.visible = params.displayIk;\n\n\t\t// update the light\n\t\ttempVec.subVectors( directionalLight.position, directionalLight.target.position );\n\t\tdirectionalLight.target.position.copy( urdfRoot.position );\n\t\tdirectionalLight.position.copy( urdfRoot.position ).add( tempVec );\n\n\t}\n\n\t// update the controls visibility\n\ttransformControls.visible = params.enableControls;\n\ttransformControls.enabled = params.enableControls;\n\n\trenderer.render( scene, camera );\n\tstats.update();\n\n}\n\n"],"names":["$b088f5fcf21bc878$var$params","animate","baseTilt","solve","displayMesh","displayIk","enableControls","settleIterations","displayConvergedOnly","$b088f5fcf21bc878$var$solverOptions","maxIterations","divergeThreshold","stallThreshold","translationErrorClamp","rotationErrorClamp","translationConvergeThreshold","rotationConvergeThreshold","$b088f5fcf21bc878$var$gui","$b088f5fcf21bc878$var$stats","$b088f5fcf21bc878$var$outputContainer","$b088f5fcf21bc878$var$renderer","$b088f5fcf21bc878$var$scene","$b088f5fcf21bc878$var$camera","$b088f5fcf21bc878$var$controls","$b088f5fcf21bc878$var$transformControls","$b088f5fcf21bc878$var$targetObject","$b088f5fcf21bc878$var$directionalLight","$b088f5fcf21bc878$var$ikNeedsUpdate","$b088f5fcf21bc878$var$tempVec","$ilwiq","Vector3","$b088f5fcf21bc878$var$urdfRoot","$b088f5fcf21bc878$var$ikRoot","$b088f5fcf21bc878$var$ikHelper","$b088f5fcf21bc878$var$drawThroughIkHelper","$b088f5fcf21bc878$var$solver","$b088f5fcf21bc878$var$platformLink","$b088f5fcf21bc878$var$platformGoal","$7MGRS","default","document","body","appendChild","dom","getElementById","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","shadowMap","enabled","type","PCFSoftShadowMap","outputEncoding","sRGBEncoding","domElement","PerspectiveCamera","position","set","Scene","background","Color","DirectionalLight","intensity","castShadow","shadow","mapSize","setScalar","shadowCam","camera","top","right","left","bottom","near","far","updateProjectionMatrix","otherDirectionalLight","ambientLight","AmbientLight","add","target","$5Rd1x","OrbitControls","y","update","$fUhpq","TransformControls","setSpace","addEventListener","$4CEV9","setIKFromUrdf","updateMatrixWorld","Group","attach","$jiuw3","GUI","listen","onChange","loader","$8C12l","fetchOptions","mode","packages","pi_hexapod_description","loadMeshCb","path","manager","done","test","$Q6arU","STLLoader","load","res","mesh","Mesh","receiveShadow","$aXdpk","ColladaLoader","model","scene","lights","traverse","c","isLight","push","forEach","l","parent","remove","loadAsync","then","result","jointType","joints","key","joint","name","includes","limit","lower","Infinity","upper","urdfRobotToIKRoot","setDoF","rotation","Math","PI","setEuler","i","setJointValue","find","Goal","setPosition","makeClosure","quaternion","i1","baseLinkName","baseLink","prismJoint","Joint","DOF","Z","setMinLimits","setMaxLimits","addChild","prismLink","Link","goal","platformLinkName","platformLink","IKRootsHelper","setResolution","color","convertSRGBToLinear","setColor","setJointScale","setDrawThrough","Solver","w","h","aspect","e","setMode","space","$b088f5fcf21bc878$var$init","$b088f5fcf21bc878$var$render","requestAnimationFrame","dragging","matrix","matrixWorld","transpose","decompose","scale","pos","quat","x","z","setQuaternion","t","performance","now","cos","sin","solveOutput","totalTime","isConverged","Object","assign","startTime","results","delta","toFixed","SOLVE_STATUS_NAMES","filter","r","SOLVE_STATUS","CONVERGED","length","isAllDiverged","DIVERGED","isAllStalled","STALLED","textContent","setUrdfFromIK","$b088f5fcf21bc878$var$updateIk","visible","subVectors","copy","render"],"version":3,"file":"hexapod.3979ddfd.js.map"}